name: Go
on:
  push:
    branches:
      - master
    paths-ignore:
      - "*.md"
      - "www/**"
      - ".github/workflows/apple-meta.yml"
      - ".github/workflows/discord.yml"
      - ".github/workflows/docs.yml"
      - ".github/workflows/webkit-meta.yml"
      - ".goreleaser.yml"
      - "config.example.yml"
  pull_request:
    branches:
      - master
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
jobs:
  # download:
  #   runs-on: macos-13
  #   steps:
  #     - name: Cache beta IPSW
  #       id: cache-beta-ipsw
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/beta
  #         key: beta-ipsw
  #     - name: Download beta IPSW
  #       if: steps.cache-beta-ipsw.outputs.cache-hit != 'true'
  #       run: |
  #         mkdir ~/beta
  #         wget -O ~/beta/beta.ipsw https://archive.org/download/iPhone142_16.0_20A5283p_Restore.ipsw/iPhone142_16.0_20A5283p_Restore.ipsw
  #     - name: Upload beta IPSW
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: beta-ipsw
  #         path: ~/beta/beta.ipsw
  build:
    strategy:
      matrix:
        platform: [macos-13]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "stable"

      #
      # CACHE
      #
      # - name: Cache beta IPSW
      #   id: cache-beta-ipsw
      #   if: matrix.platform == 'macos-13'
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/beta
      #     key: beta-ipsw
      # - name: Download beta IPSW from Artifacts
      #   if: matrix.platform == 'macos-13' && steps.cache-beta-ipsw.outputs.cache-hit != 'true'
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: beta-ipsw
      #     path: ~/beta/beta.ipsw
      # - name: Cache Downloaded IPSWs
      #   id: cache-ipsws
      #   if: matrix.platform == 'macos-13'
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/ipsw
      #     key: ${{ runner.os }}-${{ hashFiles('**/*.ipsw') }}
      - name: Cache go.mod (macOS)
        if: matrix.platform == 'macos-13'
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cache go.mod (Linux)
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cache go.mod (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Local\go-build
            ~\go\pkg\mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      #
      # Dependencies
      #
      - name: Get dependencies
        run: |
          go mod download
      - name: Build Dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get -yq install fuse3 libfuse3-dev bzip2 libbz2-dev cmake libattr1-dev zlib1g-dev
          git clone https://github.com/sgan81/apfs-fuse.git
          cd apfs-fuse
          git submodule init
          git submodule update
          mkdir build
          cd build
          cmake ..
          sudo make install
      - name: Build Dependencies (macOS)
        if: matrix.platform == 'macos-13'
        run: |
          brew install tree
      - name: Build Dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          iwr get.scoop.sh -outfile 'install.ps1'
          .\install.ps1 -RunAsAdmin
          Join-Path (Resolve-Path ~).Path "scoop\shims" >> $Env:GITHUB_PATH

      #
      # BUILD
      #
      - name: Build (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          CGO_ENABLED=1 go build -o /usr/local/bin/ipsw -ldflags "-s -w -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppVersion="v1.0.0" -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppBuildTime==$(date -u +%Y%m%d)" ./cmd/ipsw
      - name: Build (macOS)
        if: matrix.platform == 'macos-13'
        run: sudo CGO_ENABLED=1 go build -o /usr/local/bin/ipsw -ldflags "-s -w -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppVersion="v1.0.0" -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppBuildTime==$(date -u +%Y%m%d)" ./cmd/ipsw
      - name: Build (Windows)
        if: matrix.platform == 'windows-latest'
        env:
          CGO_LDFLAGS: -LD:\a\ipsw\ipsw\lzfse\build\Debug
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          go build -o build/dist/ipsw.exe -ldflags "-linkmode external -extldflags -static" ./cmd/ipsw
          dir build/dist
          dir


      - uses: actions/upload-artifact@v3
        with:
          name: Releases
          path: /usr/local/bin/ipsw
